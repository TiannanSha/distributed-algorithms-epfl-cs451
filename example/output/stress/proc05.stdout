My PID: 15305

From a new terminal type `kill -SIGINT 15305` or `kill -SIGTERM 15305` to stop processing packets

My ID: 5

List of resolved hosts is:
==========================
1
Human-readable IP: 127.0.0.1
Human-readable Port: 11001

2
Human-readable IP: 127.0.0.1
Human-readable Port: 11002

3
Human-readable IP: 127.0.0.1
Human-readable Port: 11003

4
Human-readable IP: 127.0.0.1
Human-readable Port: 11004

5
Human-readable IP: 127.0.0.1
Human-readable Port: 11005


Path to output:
===============
/Users/sha/Desktop/EPFL/2022-2023fall/distributed-algorithms/CS451-2022-project/example/output/stress/proc05.output

Path to config:
===============
../example/output/stress/config

Doing some initialization

cs451.links.LinkUser@6f539caf
Broadcasting and delivering messages...

sendAllMsgs()

sendMsgs()

in sendingLoop
packet.dst1
packet.dst1
packet.dst1
packet.dst1
packet.dst1
packet.dst1
packet.dst1
in perfect link submitasendtask()
link user receivingLoop
perfectlink deliver()
before socket receive, which blocks if no packet is received
append to log with entry: b 1

append to log with entry: b 2

append to log with entry: b 3

append to log with entry: b 4

append to log with entry: b 5

append to log with entry: b 6

append to log with entry: b 7

append to log with entry: b 8

in sendingLoop
in perfect link submitasendtask()
in perfect link send() loop, pktId = 1
in fairloss link send()
append to log with entry: b 9

append to log with entry: b 10

append to log with entry: b 11

append to log with entry: b 12

append to log with entry: b 13

append to log with entry: b 14

append to log with entry: b 15

append to log with entry: b 16

in sendingLoop
in perfect link submitasendtask()
append to log with entry: b 17

append to log with entry: b 18

append to log with entry: b 19

append to log with entry: b 20

append to log with entry: b 21

append to log with entry: b 22

append to log with entry: b 23

append to log with entry: b 24

in sendingLoop
in perfect link submitasendtask()
append to log with entry: b 25

append to log with entry: b 26

append to log with entry: b 27

append to log with entry: b 28

append to log with entry: b 29

append to log with entry: b 30

append to log with entry: b 31

append to log with entry: b 32

in sendingLoop
in perfect link submitasendtask()
append to log with entry: b 33

append to log with entry: b 34

append to log with entry: b 35

append to log with entry: b 36

append to log with entry: b 37

append to log with entry: b 38

append to log with entry: b 39

append to log with entry: b 40

in sendingLoop
in perfect link submitasendtask()
append to log with entry: b 41

append to log with entry: b 42

append to log with entry: b 43

append to log with entry: b 44

append to log with entry: b 45

append to log with entry: b 46

append to log with entry: b 47

append to log with entry: b 48

in sendingLoop
in perfect link submitasendtask()
append to log with entry: b 49

append to log with entry: b 50

in sendingLoop
send to addr:/127.0.0.1, port:11001
fair loss link deliver() after socket.receive()
perfectlink after flink deliver()
pktRecv in perfect link deliver{ pkt.src = 5, pkt.pktId = 1, pkt.isACK = true, relayedBy = 1
perfectlink deliver ACK
ACK:{ pkt.src = 5, pkt.pktId = 1, pkt.isACK = true, relayedBy = 1
link user receivingLoop after perfectLink deliver
link user receivingLoop
perfectlink deliver()
before socket receive, which blocks if no packet is received
in perfect link send() loop, pktId = 2
in fairloss link send()
send to addr:/127.0.0.1, port:11001
fair loss link deliver() after socket.receive()
perfectlink after flink deliver()
pktRecv in perfect link deliver{ pkt.src = 5, pkt.pktId = 2, pkt.isACK = true, relayedBy = 1
perfectlink deliver ACK
ACK:{ pkt.src = 5, pkt.pktId = 2, pkt.isACK = true, relayedBy = 1
link user receivingLoop after perfectLink deliver
link user receivingLoop
perfectlink deliver()
before socket receive, which blocks if no packet is received
in perfect link send() loop, pktId = 3
in fairloss link send()
send to addr:/127.0.0.1, port:11001
fair loss link deliver() after socket.receive()
perfectlink after flink deliver()
pktRecv in perfect link deliver{ pkt.src = 5, pkt.pktId = 3, pkt.isACK = true, relayedBy = 1
perfectlink deliver ACK
ACK:{ pkt.src = 5, pkt.pktId = 3, pkt.isACK = true, relayedBy = 1
link user receivingLoop after perfectLink deliver
link user receivingLoop
perfectlink deliver()
before socket receive, which blocks if no packet is received
in perfect link send() loop, pktId = 4
in fairloss link send()
send to addr:/127.0.0.1, port:11001
fair loss link deliver() after socket.receive()
perfectlink after flink deliver()
pktRecv in perfect link deliver{ pkt.src = 5, pkt.pktId = 4, pkt.isACK = true, relayedBy = 1
perfectlink deliver ACK
ACK:{ pkt.src = 5, pkt.pktId = 4, pkt.isACK = true, relayedBy = 1
link user receivingLoop after perfectLink deliver
link user receivingLoop
perfectlink deliver()
before socket receive, which blocks if no packet is received
Immediately stopping network packet processing.
Writing output.
enter flushToDisk, outputfile: /Users/sha/Desktop/EPFL/2022-2023fall/distributed-algorithms/CS451-2022-project/example/output/stress/proc05.output
