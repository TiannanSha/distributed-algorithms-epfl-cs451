My PID: 6537

From a new terminal type `kill -SIGINT 6537` or `kill -SIGTERM 6537` to stop processing packets

My ID: 1

List of resolved hosts is:
==========================
1
Human-readable IP: 127.0.0.1
Human-readable Port: 11001

2
Human-readable IP: 127.0.0.1
Human-readable Port: 11002

3
Human-readable IP: 127.0.0.1
Human-readable Port: 11003


Path to output:
===============
/Users/sha/Desktop/EPFL/2022-2023fall/distributed-algorithms/CS451-2022-project/example/output/stress/proc01.output

Path to config:
===============
../example/output/stress/config

Doing some initialization

cs451.links.LinkUser@66a29884
Broadcasting and delivering messages...

in sendingLoop
link user receivingLoop
perfectlink deliver()
before socket receive, which blocks if no packet is received
fair loss link deliver() after socket.receive()
pkt.src = 3, pkt.pktId0,pkt.isACK = false
perfectlink deliver not ACK
perfectlink deliver before reply ACK
info: creating ACK packet
fairloss link send ACK to host /127.0.0.1port 11003
packet.src = 1, packet.pktId = 0
fairloss link after send ACK
after flink send
d 3 1

d 3 2

d 3 3

d 3 4

d 3 5

d 3 6

d 3 7

d 3 8

link user receivingLoop after perfectLink deliver
link user receivingLoop
perfectlink deliver()
before socket receive, which blocks if no packet is received
fair loss link deliver() after socket.receive()
pkt.src = 3, pkt.pktId1,pkt.isACK = false
perfectlink deliver not ACK
perfectlink deliver before reply ACK
info: creating ACK packet
fairloss link send ACK to host /127.0.0.1port 11003
packet.src = 1, packet.pktId = 1
fairloss link after send ACK
after flink send
d 3 9

d 3 10

d 3 11

d 3 12

d 3 13

d 3 14

d 3 15

d 3 16

link user receivingLoop after perfectLink deliver
link user receivingLoop
perfectlink deliver()
before socket receive, which blocks if no packet is received
fair loss link deliver() after socket.receive()
pkt.src = 3, pkt.pktId2,pkt.isACK = false
perfectlink deliver not ACK
perfectlink deliver before reply ACK
info: creating ACK packet
fairloss link send ACK to host /127.0.0.1port 11003
packet.src = 1, packet.pktId = 2
fairloss link after send ACK
after flink send
d 3 17

d 3 18

d 3 19

d 3 20

d 3 21

d 3 22

d 3 23

d 3 24

link user receivingLoop after perfectLink deliver
link user receivingLoop
perfectlink deliver()
before socket receive, which blocks if no packet is received
fair loss link deliver() after socket.receive()
pkt.src = 2, pkt.pktId2,pkt.isACK = false
perfectlink deliver not ACK
perfectlink deliver before reply ACK
info: creating ACK packet
fairloss link send ACK to host /127.0.0.1port 11002
packet.src = 1, packet.pktId = 2
fairloss link after send ACK
after flink send
d 2 17

d 2 18

d 2 19

d 2 20

d 2 21

d 2 22

d 2 23

d 2 24

link user receivingLoop after perfectLink deliver
link user receivingLoop
perfectlink deliver()
before socket receive, which blocks if no packet is received
fair loss link deliver() after socket.receive()
pkt.src = 2, pkt.pktId0,pkt.isACK = false
perfectlink deliver not ACK
perfectlink deliver before reply ACK
info: creating ACK packet
fairloss link send ACK to host /127.0.0.1port 11002
packet.src = 1, packet.pktId = 0
fairloss link after send ACK
after flink send
d 2 1

d 2 2

d 2 3

d 2 4

d 2 5

d 2 6

d 2 7

d 2 8

link user receivingLoop after perfectLink deliver
link user receivingLoop
perfectlink deliver()
before socket receive, which blocks if no packet is received
fair loss link deliver() after socket.receive()
pkt.src = 2, pkt.pktId1,pkt.isACK = false
perfectlink deliver not ACK
perfectlink deliver before reply ACK
info: creating ACK packet
fairloss link send ACK to host /127.0.0.1port 11002
packet.src = 1, packet.pktId = 1
fairloss link after send ACK
after flink send
d 2 9

d 2 10

d 2 11

d 2 12

d 2 13

d 2 14

d 2 15

d 2 16

link user receivingLoop after perfectLink deliver
link user receivingLoop
perfectlink deliver()
before socket receive, which blocks if no packet is received
fair loss link deliver() after socket.receive()
pkt.src = 3, pkt.pktId2,pkt.isACK = false
perfectlink deliver not ACK
perfectlink deliver before reply ACK
info: creating ACK packet
fairloss link send ACK to host /127.0.0.1port 11003
packet.src = 1, packet.pktId = 2
fairloss link after send ACK
after flink send
link user receivingLoop after perfectLink deliver
link user receivingLoop
perfectlink deliver()
before socket receive, which blocks if no packet is received
fair loss link deliver() after socket.receive()
pkt.src = 3, pkt.pktId0,pkt.isACK = false
perfectlink deliver not ACK
perfectlink deliver before reply ACK
info: creating ACK packet
fairloss link send ACK to host /127.0.0.1port 11003
packet.src = 1, packet.pktId = 0
fairloss link after send ACK
after flink send
link user receivingLoop after perfectLink deliver
link user receivingLoop
perfectlink deliver()
before socket receive, which blocks if no packet is received
fair loss link deliver() after socket.receive()
pkt.src = 3, pkt.pktId1,pkt.isACK = false
perfectlink deliver not ACK
perfectlink deliver before reply ACK
info: creating ACK packet
fairloss link send ACK to host /127.0.0.1port 11003
packet.src = 1, packet.pktId = 1
fairloss link after send ACK
after flink send
link user receivingLoop after perfectLink deliver
link user receivingLoop
perfectlink deliver()
before socket receive, which blocks if no packet is received
fair loss link deliver() after socket.receive()
pkt.src = 2, pkt.pktId2,pkt.isACK = false
perfectlink deliver not ACK
perfectlink deliver before reply ACK
info: creating ACK packet
fairloss link send ACK to host /127.0.0.1port 11002
packet.src = 1, packet.pktId = 2
fairloss link after send ACK
after flink send
link user receivingLoop after perfectLink deliver
link user receivingLoop
perfectlink deliver()
before socket receive, which blocks if no packet is received
fair loss link deliver() after socket.receive()
pkt.src = 2, pkt.pktId0,pkt.isACK = false
perfectlink deliver not ACK
perfectlink deliver before reply ACK
info: creating ACK packet
fairloss link send ACK to host /127.0.0.1port 11002
packet.src = 1, packet.pktId = 0
fairloss link after send ACK
after flink send
link user receivingLoop after perfectLink deliver
link user receivingLoop
perfectlink deliver()
before socket receive, which blocks if no packet is received
fair loss link deliver() after socket.receive()
pkt.src = 2, pkt.pktId1,pkt.isACK = false
perfectlink deliver not ACK
perfectlink deliver before reply ACK
info: creating ACK packet
fairloss link send ACK to host /127.0.0.1port 11002
packet.src = 1, packet.pktId = 1
fairloss link after send ACK
after flink send
link user receivingLoop after perfectLink deliver
link user receivingLoop
perfectlink deliver()
before socket receive, which blocks if no packet is received
fair loss link deliver() after socket.receive()
pkt.src = 2, pkt.pktId3,pkt.isACK = false
perfectlink deliver not ACK
perfectlink deliver before reply ACK
info: creating ACK packet
fairloss link send ACK to host /127.0.0.1port 11002
packet.src = 1, packet.pktId = 3
fairloss link after send ACK
after flink send
d 2 25

d 2 26

d 2 27

d 2 28

d 2 29

d 2 30

d 2 31

d 2 32

link user receivingLoop after perfectLink deliver
link user receivingLoop
perfectlink deliver()
before socket receive, which blocks if no packet is received
fair loss link deliver() after socket.receive()
pkt.src = 2, pkt.pktId4,pkt.isACK = false
perfectlink deliver not ACK
perfectlink deliver before reply ACK
info: creating ACK packet
fairloss link send ACK to host /127.0.0.1port 11002
packet.src = 1, packet.pktId = 4
fairloss link after send ACK
after flink send
d 2 33

d 2 34

d 2 35

d 2 36

d 2 37

d 2 38

d 2 39

d 2 40

link user receivingLoop after perfectLink deliver
link user receivingLoop
perfectlink deliver()
before socket receive, which blocks if no packet is received
fair loss link deliver() after socket.receive()
pkt.src = 2, pkt.pktId5,pkt.isACK = false
perfectlink deliver not ACK
perfectlink deliver before reply ACK
info: creating ACK packet
fairloss link send ACK to host /127.0.0.1port 11002
packet.src = 1, packet.pktId = 5
fairloss link after send ACK
after flink send
d 2 41

d 2 42

d 2 43

d 2 44

d 2 45

d 2 46

d 2 47

d 2 48

link user receivingLoop after perfectLink deliver
link user receivingLoop
perfectlink deliver()
before socket receive, which blocks if no packet is received
fair loss link deliver() after socket.receive()
pkt.src = 3, pkt.pktId4,pkt.isACK = false
perfectlink deliver not ACK
perfectlink deliver before reply ACK
info: creating ACK packet
fairloss link send ACK to host /127.0.0.1port 11003
packet.src = 1, packet.pktId = 4
fairloss link after send ACK
after flink send
d 3 33

d 3 34

d 3 35

d 3 36

d 3 37

d 3 38

d 3 39

d 3 40

link user receivingLoop after perfectLink deliver
link user receivingLoop
perfectlink deliver()
before socket receive, which blocks if no packet is received
fair loss link deliver() after socket.receive()
pkt.src = 3, pkt.pktId5,pkt.isACK = false
perfectlink deliver not ACK
perfectlink deliver before reply ACK
info: creating ACK packet
fairloss link send ACK to host /127.0.0.1port 11003
packet.src = 1, packet.pktId = 5
fairloss link after send ACK
after flink send
d 3 41

d 3 42

d 3 43

d 3 44

d 3 45

d 3 46

d 3 47

d 3 48

link user receivingLoop after perfectLink deliver
link user receivingLoop
perfectlink deliver()
before socket receive, which blocks if no packet is received
fair loss link deliver() after socket.receive()
pkt.src = 3, pkt.pktId3,pkt.isACK = false
perfectlink deliver not ACK
perfectlink deliver before reply ACK
info: creating ACK packet
fairloss link send ACK to host /127.0.0.1port 11003
packet.src = 1, packet.pktId = 3
fairloss link after send ACK
after flink send
d 3 25

d 3 26

d 3 27

d 3 28

d 3 29

d 3 30

d 3 31

d 3 32

link user receivingLoop after perfectLink deliver
link user receivingLoop
perfectlink deliver()
before socket receive, which blocks if no packet is received
fair loss link deliver() after socket.receive()
pkt.src = 2, pkt.pktId6,pkt.isACK = false
perfectlink deliver not ACK
perfectlink deliver before reply ACK
info: creating ACK packet
fairloss link send ACK to host /127.0.0.1port 11002
packet.src = 1, packet.pktId = 6
fairloss link after send ACK
after flink send
d 2 49

d 2 50

d 2 51

d 2 52

d 2 53

d 2 54

d 2 55

d 2 56

link user receivingLoop after perfectLink deliver
link user receivingLoop
perfectlink deliver()
before socket receive, which blocks if no packet is received
fair loss link deliver() after socket.receive()
pkt.src = 2, pkt.pktId7,pkt.isACK = false
perfectlink deliver not ACK
perfectlink deliver before reply ACK
info: creating ACK packet
fairloss link send ACK to host /127.0.0.1port 11002
packet.src = 1, packet.pktId = 7
fairloss link after send ACK
after flink send
d 2 57

d 2 58

d 2 59

d 2 60

d 2 61

d 2 62

d 2 63

d 2 64

link user receivingLoop after perfectLink deliver
link user receivingLoop
perfectlink deliver()
before socket receive, which blocks if no packet is received
fair loss link deliver() after socket.receive()
pkt.src = 2, pkt.pktId8,pkt.isACK = false
perfectlink deliver not ACK
perfectlink deliver before reply ACK
info: creating ACK packet
fairloss link send ACK to host /127.0.0.1port 11002
packet.src = 1, packet.pktId = 8
fairloss link after send ACK
after flink send
d 2 65

d 2 66

d 2 67

d 2 68

d 2 69

d 2 70

d 2 71

d 2 72

link user receivingLoop after perfectLink deliver
link user receivingLoop
perfectlink deliver()
before socket receive, which blocks if no packet is received
fair loss link deliver() after socket.receive()
pkt.src = 3, pkt.pktId8,pkt.isACK = false
perfectlink deliver not ACK
perfectlink deliver before reply ACK
info: creating ACK packet
fairloss link send ACK to host /127.0.0.1port 11003
packet.src = 1, packet.pktId = 8
fairloss link after send ACK
after flink send
d 3 65

d 3 66

d 3 67

d 3 68

d 3 69

d 3 70

d 3 71

d 3 72

link user receivingLoop after perfectLink deliver
link user receivingLoop
perfectlink deliver()
before socket receive, which blocks if no packet is received
fair loss link deliver() after socket.receive()
pkt.src = 3, pkt.pktId6,pkt.isACK = false
perfectlink deliver not ACK
perfectlink deliver before reply ACK
info: creating ACK packet
fairloss link send ACK to host /127.0.0.1port 11003
packet.src = 1, packet.pktId = 6
fairloss link after send ACK
after flink send
d 3 49

d 3 50

d 3 51

d 3 52

d 3 53

d 3 54

d 3 55

d 3 56

link user receivingLoop after perfectLink deliver
link user receivingLoop
perfectlink deliver()
before socket receive, which blocks if no packet is received
fair loss link deliver() after socket.receive()
pkt.src = 3, pkt.pktId7,pkt.isACK = false
perfectlink deliver not ACK
perfectlink deliver before reply ACK
info: creating ACK packet
fairloss link send ACK to host /127.0.0.1port 11003
packet.src = 1, packet.pktId = 7
fairloss link after send ACK
after flink send
d 3 57

d 3 58

d 3 59

d 3 60

d 3 61

d 3 62

d 3 63

d 3 64

link user receivingLoop after perfectLink deliver
link user receivingLoop
perfectlink deliver()
before socket receive, which blocks if no packet is received
fair loss link deliver() after socket.receive()
pkt.src = 2, pkt.pktId9,pkt.isACK = false
perfectlink deliver not ACK
perfectlink deliver before reply ACK
info: creating ACK packet
fairloss link send ACK to host /127.0.0.1port 11002
packet.src = 1, packet.pktId = 9
fairloss link after send ACK
after flink send
d 2 73

d 2 74

d 2 75

d 2 76

d 2 77

d 2 78

d 2 79

d 2 80

link user receivingLoop after perfectLink deliver
link user receivingLoop
perfectlink deliver()
before socket receive, which blocks if no packet is received
fair loss link deliver() after socket.receive()
pkt.src = 2, pkt.pktId10,pkt.isACK = false
perfectlink deliver not ACK
perfectlink deliver before reply ACK
info: creating ACK packet
fairloss link send ACK to host /127.0.0.1port 11002
packet.src = 1, packet.pktId = 10
fairloss link after send ACK
after flink send
d 2 81

d 2 82

d 2 83

d 2 84

d 2 85

d 2 86

d 2 87

d 2 88

link user receivingLoop after perfectLink deliver
link user receivingLoop
perfectlink deliver()
before socket receive, which blocks if no packet is received
Immediately stopping network packet processing.
Writing output.
enter flushToDisk, outputfile: /Users/sha/Desktop/EPFL/2022-2023fall/distributed-algorithms/CS451-2022-project/example/output/stress/proc01.output
